hehe
import requests
import json

URL=''
data={
    'first_name':"kar",
    "last_name":'mn',
    "roll_number":5


}
json_data=json.dumps(data)
r=requests.post(url=URL,data=json_data)
data=r.json
print(data)

validated field can only return the validated data or the serialixation.validation,error

in field level validation we can set the defualt value for the fileds if the user sends the data greater than
the defualt value it raises the validation error

for example
class StudentSerializer():
roll=serializer.Intfield()

    def validate_roll(self,value):
        if value>=200:
            raise serializer.validationerror("full")
        return value
we want to check the data of all the fields of the model we can use thid

    def validate(self,data):
        nm=data.get("first_name")
        rn=data.get("roll_number")

        we can add any logic to these variables and raise error
    return data

we can make use of validators inside the serializers before defining the function
like
def starts_with(value):
    if value[].lower==value[3] :
    raise x error

class StudentSerializer():
    name=serializer.Charfield(max_length=10,validators=[starts_with]
model serializer creates serializer for all the fields inside the model
its a shortcut for creating serializer for all the fields inside the model

